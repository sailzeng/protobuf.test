// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_test_03.proto

#ifndef PROTOBUF_pb_5ftest_5f03_2eproto__INCLUDED
#define PROTOBUF_pb_5ftest_5f03_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5ftest_5f03_2eproto();
void protobuf_AssignDesc_pb_5ftest_5f03_2eproto();
void protobuf_ShutdownFile_pb_5ftest_5f03_2eproto();

class S2;
class S3;

enum E1 {
  E1_1 = 1,
  E1_3 = 3,
  E1_5 = 5
};
bool E1_IsValid(int value);
const E1 E1_MIN = E1_1;
const E1 E1_MAX = E1_5;
const int E1_ARRAYSIZE = E1_MAX + 1;

const ::google::protobuf::EnumDescriptor* E1_descriptor();
inline const ::std::string& E1_Name(E1 value) {
  return ::google::protobuf::internal::NameOfEnum(
    E1_descriptor(), value);
}
inline bool E1_Parse(
    const ::std::string& name, E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E1>(
    E1_descriptor(), name, value);
}
// ===================================================================

class S2 : public ::google::protobuf::Message {
 public:
  S2();
  virtual ~S2();

  S2(const S2& from);

  inline S2& operator=(const S2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2& default_instance();

  void Swap(S2* other);

  // implements Message ----------------------------------------------

  S2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2& from);
  void MergeFrom(const S2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 s2_1 = 1;
  inline bool has_s2_1() const;
  inline void clear_s2_1();
  static const int kS21FieldNumber = 1;
  inline ::google::protobuf::int32 s2_1() const;
  inline void set_s2_1(::google::protobuf::int32 value);

  // optional string s2_2 = 2;
  inline bool has_s2_2() const;
  inline void clear_s2_2();
  static const int kS22FieldNumber = 2;
  inline const ::std::string& s2_2() const;
  inline void set_s2_2(const ::std::string& value);
  inline void set_s2_2(const char* value);
  inline void set_s2_2(const char* value, size_t size);
  inline ::std::string* mutable_s2_2();
  inline ::std::string* release_s2_2();
  inline void set_allocated_s2_2(::std::string* s2_2);

  // @@protoc_insertion_point(class_scope:S2)
 private:
  inline void set_has_s2_1();
  inline void clear_has_s2_1();
  inline void set_has_s2_2();
  inline void clear_has_s2_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* s2_2_;
  ::google::protobuf::int32 s2_1_;
  friend void  protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  friend void protobuf_AssignDesc_pb_5ftest_5f03_2eproto();
  friend void protobuf_ShutdownFile_pb_5ftest_5f03_2eproto();

  void InitAsDefaultInstance();
  static S2* default_instance_;
};
// -------------------------------------------------------------------

class S3 : public ::google::protobuf::Message {
 public:
  S3();
  virtual ~S3();

  S3(const S3& from);

  inline S3& operator=(const S3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S3& default_instance();

  void Swap(S3* other);

  // implements Message ----------------------------------------------

  S3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S3& from);
  void MergeFrom(const S3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 s3_1 = 1;
  inline bool has_s3_1() const;
  inline void clear_s3_1();
  static const int kS31FieldNumber = 1;
  inline ::google::protobuf::int32 s3_1() const;
  inline void set_s3_1(::google::protobuf::int32 value);

  // optional int32 s3_2 = 2;
  inline bool has_s3_2() const;
  inline void clear_s3_2();
  static const int kS32FieldNumber = 2;
  inline ::google::protobuf::int32 s3_2() const;
  inline void set_s3_2(::google::protobuf::int32 value);

  // optional uint32 s3_3 = 3;
  inline bool has_s3_3() const;
  inline void clear_s3_3();
  static const int kS33FieldNumber = 3;
  inline ::google::protobuf::uint32 s3_3() const;
  inline void set_s3_3(::google::protobuf::uint32 value);

  // optional uint32 s3_4 = 4;
  inline bool has_s3_4() const;
  inline void clear_s3_4();
  static const int kS34FieldNumber = 4;
  inline ::google::protobuf::uint32 s3_4() const;
  inline void set_s3_4(::google::protobuf::uint32 value);

  // optional int64 s3_5 = 5;
  inline bool has_s3_5() const;
  inline void clear_s3_5();
  static const int kS35FieldNumber = 5;
  inline ::google::protobuf::int64 s3_5() const;
  inline void set_s3_5(::google::protobuf::int64 value);

  // optional int64 s3_6 = 6;
  inline bool has_s3_6() const;
  inline void clear_s3_6();
  static const int kS36FieldNumber = 6;
  inline ::google::protobuf::int64 s3_6() const;
  inline void set_s3_6(::google::protobuf::int64 value);

  // optional uint64 s3_7 = 7;
  inline bool has_s3_7() const;
  inline void clear_s3_7();
  static const int kS37FieldNumber = 7;
  inline ::google::protobuf::uint64 s3_7() const;
  inline void set_s3_7(::google::protobuf::uint64 value);

  // optional uint64 s3_8 = 8;
  inline bool has_s3_8() const;
  inline void clear_s3_8();
  static const int kS38FieldNumber = 8;
  inline ::google::protobuf::uint64 s3_8() const;
  inline void set_s3_8(::google::protobuf::uint64 value);

  // optional sint32 s3_9 = 9;
  inline bool has_s3_9() const;
  inline void clear_s3_9();
  static const int kS39FieldNumber = 9;
  inline ::google::protobuf::int32 s3_9() const;
  inline void set_s3_9(::google::protobuf::int32 value);

  // optional sint32 s3_10 = 10;
  inline bool has_s3_10() const;
  inline void clear_s3_10();
  static const int kS310FieldNumber = 10;
  inline ::google::protobuf::int32 s3_10() const;
  inline void set_s3_10(::google::protobuf::int32 value);

  // optional sint64 s3_64 = 64;
  inline bool has_s3_64() const;
  inline void clear_s3_64();
  static const int kS364FieldNumber = 64;
  inline ::google::protobuf::int64 s3_64() const;
  inline void set_s3_64(::google::protobuf::int64 value);

  // optional sint64 s3_65 = 65;
  inline bool has_s3_65() const;
  inline void clear_s3_65();
  static const int kS365FieldNumber = 65;
  inline ::google::protobuf::int64 s3_65() const;
  inline void set_s3_65(::google::protobuf::int64 value);

  // optional .E1 s3_11 = 11;
  inline bool has_s3_11() const;
  inline void clear_s3_11();
  static const int kS311FieldNumber = 11;
  inline ::E1 s3_11() const;
  inline void set_s3_11(::E1 value);

  // optional bool s3_12 = 12;
  inline bool has_s3_12() const;
  inline void clear_s3_12();
  static const int kS312FieldNumber = 12;
  inline bool s3_12() const;
  inline void set_s3_12(bool value);

  // optional float s3_13 = 13;
  inline bool has_s3_13() const;
  inline void clear_s3_13();
  static const int kS313FieldNumber = 13;
  inline float s3_13() const;
  inline void set_s3_13(float value);

  // optional fixed32 s3_14 = 14;
  inline bool has_s3_14() const;
  inline void clear_s3_14();
  static const int kS314FieldNumber = 14;
  inline ::google::protobuf::uint32 s3_14() const;
  inline void set_s3_14(::google::protobuf::uint32 value);

  // optional sfixed32 s3_15 = 15;
  inline bool has_s3_15() const;
  inline void clear_s3_15();
  static const int kS315FieldNumber = 15;
  inline ::google::protobuf::int32 s3_15() const;
  inline void set_s3_15(::google::protobuf::int32 value);

  // optional double s3_16 = 16;
  inline bool has_s3_16() const;
  inline void clear_s3_16();
  static const int kS316FieldNumber = 16;
  inline double s3_16() const;
  inline void set_s3_16(double value);

  // optional fixed64 s3_17 = 17;
  inline bool has_s3_17() const;
  inline void clear_s3_17();
  static const int kS317FieldNumber = 17;
  inline ::google::protobuf::uint64 s3_17() const;
  inline void set_s3_17(::google::protobuf::uint64 value);

  // optional sfixed64 s3_18 = 18;
  inline bool has_s3_18() const;
  inline void clear_s3_18();
  static const int kS318FieldNumber = 18;
  inline ::google::protobuf::int64 s3_18() const;
  inline void set_s3_18(::google::protobuf::int64 value);

  // optional string s3_19 = 19;
  inline bool has_s3_19() const;
  inline void clear_s3_19();
  static const int kS319FieldNumber = 19;
  inline const ::std::string& s3_19() const;
  inline void set_s3_19(const ::std::string& value);
  inline void set_s3_19(const char* value);
  inline void set_s3_19(const char* value, size_t size);
  inline ::std::string* mutable_s3_19();
  inline ::std::string* release_s3_19();
  inline void set_allocated_s3_19(::std::string* s3_19);

  // optional bytes s3_20 = 20;
  inline bool has_s3_20() const;
  inline void clear_s3_20();
  static const int kS320FieldNumber = 20;
  inline const ::std::string& s3_20() const;
  inline void set_s3_20(const ::std::string& value);
  inline void set_s3_20(const char* value);
  inline void set_s3_20(const void* value, size_t size);
  inline ::std::string* mutable_s3_20();
  inline ::std::string* release_s3_20();
  inline void set_allocated_s3_20(::std::string* s3_20);

  // repeated int32 s3_21 = 21;
  inline int s3_21_size() const;
  inline void clear_s3_21();
  static const int kS321FieldNumber = 21;
  inline ::google::protobuf::int32 s3_21(int index) const;
  inline void set_s3_21(int index, ::google::protobuf::int32 value);
  inline void add_s3_21(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s3_21() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s3_21();

  // repeated int32 s3_22 = 22 [packed = true];
  inline int s3_22_size() const;
  inline void clear_s3_22();
  static const int kS322FieldNumber = 22;
  inline ::google::protobuf::int32 s3_22(int index) const;
  inline void set_s3_22(int index, ::google::protobuf::int32 value);
  inline void add_s3_22(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s3_22() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s3_22();

  // repeated string s3_23 = 23;
  inline int s3_23_size() const;
  inline void clear_s3_23();
  static const int kS323FieldNumber = 23;
  inline const ::std::string& s3_23(int index) const;
  inline ::std::string* mutable_s3_23(int index);
  inline void set_s3_23(int index, const ::std::string& value);
  inline void set_s3_23(int index, const char* value);
  inline void set_s3_23(int index, const char* value, size_t size);
  inline ::std::string* add_s3_23();
  inline void add_s3_23(const ::std::string& value);
  inline void add_s3_23(const char* value);
  inline void add_s3_23(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& s3_23() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_s3_23();

  // optional .S2 s3_24 = 24;
  inline bool has_s3_24() const;
  inline void clear_s3_24();
  static const int kS324FieldNumber = 24;
  inline const ::S2& s3_24() const;
  inline ::S2* mutable_s3_24();
  inline ::S2* release_s3_24();
  inline void set_allocated_s3_24(::S2* s3_24);

  // repeated .S2 s3_25 = 25;
  inline int s3_25_size() const;
  inline void clear_s3_25();
  static const int kS325FieldNumber = 25;
  inline const ::S2& s3_25(int index) const;
  inline ::S2* mutable_s3_25(int index);
  inline ::S2* add_s3_25();
  inline const ::google::protobuf::RepeatedPtrField< ::S2 >&
      s3_25() const;
  inline ::google::protobuf::RepeatedPtrField< ::S2 >*
      mutable_s3_25();

  // @@protoc_insertion_point(class_scope:S3)
 private:
  inline void set_has_s3_1();
  inline void clear_has_s3_1();
  inline void set_has_s3_2();
  inline void clear_has_s3_2();
  inline void set_has_s3_3();
  inline void clear_has_s3_3();
  inline void set_has_s3_4();
  inline void clear_has_s3_4();
  inline void set_has_s3_5();
  inline void clear_has_s3_5();
  inline void set_has_s3_6();
  inline void clear_has_s3_6();
  inline void set_has_s3_7();
  inline void clear_has_s3_7();
  inline void set_has_s3_8();
  inline void clear_has_s3_8();
  inline void set_has_s3_9();
  inline void clear_has_s3_9();
  inline void set_has_s3_10();
  inline void clear_has_s3_10();
  inline void set_has_s3_64();
  inline void clear_has_s3_64();
  inline void set_has_s3_65();
  inline void clear_has_s3_65();
  inline void set_has_s3_11();
  inline void clear_has_s3_11();
  inline void set_has_s3_12();
  inline void clear_has_s3_12();
  inline void set_has_s3_13();
  inline void clear_has_s3_13();
  inline void set_has_s3_14();
  inline void clear_has_s3_14();
  inline void set_has_s3_15();
  inline void clear_has_s3_15();
  inline void set_has_s3_16();
  inline void clear_has_s3_16();
  inline void set_has_s3_17();
  inline void clear_has_s3_17();
  inline void set_has_s3_18();
  inline void clear_has_s3_18();
  inline void set_has_s3_19();
  inline void clear_has_s3_19();
  inline void set_has_s3_20();
  inline void clear_has_s3_20();
  inline void set_has_s3_24();
  inline void clear_has_s3_24();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 s3_1_;
  ::google::protobuf::int32 s3_2_;
  ::google::protobuf::uint32 s3_3_;
  ::google::protobuf::uint32 s3_4_;
  ::google::protobuf::int64 s3_5_;
  ::google::protobuf::int64 s3_6_;
  ::google::protobuf::uint64 s3_7_;
  ::google::protobuf::uint64 s3_8_;
  ::google::protobuf::int32 s3_9_;
  ::google::protobuf::int32 s3_10_;
  ::google::protobuf::int64 s3_64_;
  ::google::protobuf::int64 s3_65_;
  int s3_11_;
  bool s3_12_;
  float s3_13_;
  ::google::protobuf::uint32 s3_14_;
  double s3_16_;
  ::google::protobuf::uint64 s3_17_;
  ::google::protobuf::int64 s3_18_;
  ::std::string* s3_19_;
  ::std::string* s3_20_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s3_21_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s3_22_;
  mutable int _s3_22_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> s3_23_;
  ::S2* s3_24_;
  ::google::protobuf::RepeatedPtrField< ::S2 > s3_25_;
  ::google::protobuf::int32 s3_15_;
  friend void  protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  friend void protobuf_AssignDesc_pb_5ftest_5f03_2eproto();
  friend void protobuf_ShutdownFile_pb_5ftest_5f03_2eproto();

  void InitAsDefaultInstance();
  static S3* default_instance_;
};
// ===================================================================


// ===================================================================

// S2

// optional int32 s2_1 = 1;
inline bool S2::has_s2_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2::set_has_s2_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2::clear_has_s2_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2::clear_s2_1() {
  s2_1_ = 0;
  clear_has_s2_1();
}
inline ::google::protobuf::int32 S2::s2_1() const {
  // @@protoc_insertion_point(field_get:S2.s2_1)
  return s2_1_;
}
inline void S2::set_s2_1(::google::protobuf::int32 value) {
  set_has_s2_1();
  s2_1_ = value;
  // @@protoc_insertion_point(field_set:S2.s2_1)
}

// optional string s2_2 = 2;
inline bool S2::has_s2_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2::set_has_s2_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2::clear_has_s2_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2::clear_s2_2() {
  if (s2_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s2_2_->clear();
  }
  clear_has_s2_2();
}
inline const ::std::string& S2::s2_2() const {
  // @@protoc_insertion_point(field_get:S2.s2_2)
  return *s2_2_;
}
inline void S2::set_s2_2(const ::std::string& value) {
  set_has_s2_2();
  if (s2_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s2_2_ = new ::std::string;
  }
  s2_2_->assign(value);
  // @@protoc_insertion_point(field_set:S2.s2_2)
}
inline void S2::set_s2_2(const char* value) {
  set_has_s2_2();
  if (s2_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s2_2_ = new ::std::string;
  }
  s2_2_->assign(value);
  // @@protoc_insertion_point(field_set_char:S2.s2_2)
}
inline void S2::set_s2_2(const char* value, size_t size) {
  set_has_s2_2();
  if (s2_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s2_2_ = new ::std::string;
  }
  s2_2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:S2.s2_2)
}
inline ::std::string* S2::mutable_s2_2() {
  set_has_s2_2();
  if (s2_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s2_2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:S2.s2_2)
  return s2_2_;
}
inline ::std::string* S2::release_s2_2() {
  clear_has_s2_2();
  if (s2_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s2_2_;
    s2_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2::set_allocated_s2_2(::std::string* s2_2) {
  if (s2_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s2_2_;
  }
  if (s2_2) {
    set_has_s2_2();
    s2_2_ = s2_2;
  } else {
    clear_has_s2_2();
    s2_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:S2.s2_2)
}

// -------------------------------------------------------------------

// S3

// optional int32 s3_1 = 1;
inline bool S3::has_s3_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S3::set_has_s3_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S3::clear_has_s3_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S3::clear_s3_1() {
  s3_1_ = 0;
  clear_has_s3_1();
}
inline ::google::protobuf::int32 S3::s3_1() const {
  // @@protoc_insertion_point(field_get:S3.s3_1)
  return s3_1_;
}
inline void S3::set_s3_1(::google::protobuf::int32 value) {
  set_has_s3_1();
  s3_1_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_1)
}

// optional int32 s3_2 = 2;
inline bool S3::has_s3_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S3::set_has_s3_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S3::clear_has_s3_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S3::clear_s3_2() {
  s3_2_ = 0;
  clear_has_s3_2();
}
inline ::google::protobuf::int32 S3::s3_2() const {
  // @@protoc_insertion_point(field_get:S3.s3_2)
  return s3_2_;
}
inline void S3::set_s3_2(::google::protobuf::int32 value) {
  set_has_s3_2();
  s3_2_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_2)
}

// optional uint32 s3_3 = 3;
inline bool S3::has_s3_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S3::set_has_s3_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S3::clear_has_s3_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S3::clear_s3_3() {
  s3_3_ = 0u;
  clear_has_s3_3();
}
inline ::google::protobuf::uint32 S3::s3_3() const {
  // @@protoc_insertion_point(field_get:S3.s3_3)
  return s3_3_;
}
inline void S3::set_s3_3(::google::protobuf::uint32 value) {
  set_has_s3_3();
  s3_3_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_3)
}

// optional uint32 s3_4 = 4;
inline bool S3::has_s3_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S3::set_has_s3_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S3::clear_has_s3_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S3::clear_s3_4() {
  s3_4_ = 0u;
  clear_has_s3_4();
}
inline ::google::protobuf::uint32 S3::s3_4() const {
  // @@protoc_insertion_point(field_get:S3.s3_4)
  return s3_4_;
}
inline void S3::set_s3_4(::google::protobuf::uint32 value) {
  set_has_s3_4();
  s3_4_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_4)
}

// optional int64 s3_5 = 5;
inline bool S3::has_s3_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S3::set_has_s3_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S3::clear_has_s3_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S3::clear_s3_5() {
  s3_5_ = GOOGLE_LONGLONG(0);
  clear_has_s3_5();
}
inline ::google::protobuf::int64 S3::s3_5() const {
  // @@protoc_insertion_point(field_get:S3.s3_5)
  return s3_5_;
}
inline void S3::set_s3_5(::google::protobuf::int64 value) {
  set_has_s3_5();
  s3_5_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_5)
}

// optional int64 s3_6 = 6;
inline bool S3::has_s3_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S3::set_has_s3_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S3::clear_has_s3_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S3::clear_s3_6() {
  s3_6_ = GOOGLE_LONGLONG(0);
  clear_has_s3_6();
}
inline ::google::protobuf::int64 S3::s3_6() const {
  // @@protoc_insertion_point(field_get:S3.s3_6)
  return s3_6_;
}
inline void S3::set_s3_6(::google::protobuf::int64 value) {
  set_has_s3_6();
  s3_6_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_6)
}

// optional uint64 s3_7 = 7;
inline bool S3::has_s3_7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S3::set_has_s3_7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S3::clear_has_s3_7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S3::clear_s3_7() {
  s3_7_ = GOOGLE_ULONGLONG(0);
  clear_has_s3_7();
}
inline ::google::protobuf::uint64 S3::s3_7() const {
  // @@protoc_insertion_point(field_get:S3.s3_7)
  return s3_7_;
}
inline void S3::set_s3_7(::google::protobuf::uint64 value) {
  set_has_s3_7();
  s3_7_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_7)
}

// optional uint64 s3_8 = 8;
inline bool S3::has_s3_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S3::set_has_s3_8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S3::clear_has_s3_8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S3::clear_s3_8() {
  s3_8_ = GOOGLE_ULONGLONG(0);
  clear_has_s3_8();
}
inline ::google::protobuf::uint64 S3::s3_8() const {
  // @@protoc_insertion_point(field_get:S3.s3_8)
  return s3_8_;
}
inline void S3::set_s3_8(::google::protobuf::uint64 value) {
  set_has_s3_8();
  s3_8_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_8)
}

// optional sint32 s3_9 = 9;
inline bool S3::has_s3_9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void S3::set_has_s3_9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void S3::clear_has_s3_9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void S3::clear_s3_9() {
  s3_9_ = 0;
  clear_has_s3_9();
}
inline ::google::protobuf::int32 S3::s3_9() const {
  // @@protoc_insertion_point(field_get:S3.s3_9)
  return s3_9_;
}
inline void S3::set_s3_9(::google::protobuf::int32 value) {
  set_has_s3_9();
  s3_9_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_9)
}

// optional sint32 s3_10 = 10;
inline bool S3::has_s3_10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void S3::set_has_s3_10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void S3::clear_has_s3_10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void S3::clear_s3_10() {
  s3_10_ = 0;
  clear_has_s3_10();
}
inline ::google::protobuf::int32 S3::s3_10() const {
  // @@protoc_insertion_point(field_get:S3.s3_10)
  return s3_10_;
}
inline void S3::set_s3_10(::google::protobuf::int32 value) {
  set_has_s3_10();
  s3_10_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_10)
}

// optional sint64 s3_64 = 64;
inline bool S3::has_s3_64() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void S3::set_has_s3_64() {
  _has_bits_[0] |= 0x00000400u;
}
inline void S3::clear_has_s3_64() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void S3::clear_s3_64() {
  s3_64_ = GOOGLE_LONGLONG(0);
  clear_has_s3_64();
}
inline ::google::protobuf::int64 S3::s3_64() const {
  // @@protoc_insertion_point(field_get:S3.s3_64)
  return s3_64_;
}
inline void S3::set_s3_64(::google::protobuf::int64 value) {
  set_has_s3_64();
  s3_64_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_64)
}

// optional sint64 s3_65 = 65;
inline bool S3::has_s3_65() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void S3::set_has_s3_65() {
  _has_bits_[0] |= 0x00000800u;
}
inline void S3::clear_has_s3_65() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void S3::clear_s3_65() {
  s3_65_ = GOOGLE_LONGLONG(0);
  clear_has_s3_65();
}
inline ::google::protobuf::int64 S3::s3_65() const {
  // @@protoc_insertion_point(field_get:S3.s3_65)
  return s3_65_;
}
inline void S3::set_s3_65(::google::protobuf::int64 value) {
  set_has_s3_65();
  s3_65_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_65)
}

// optional .E1 s3_11 = 11;
inline bool S3::has_s3_11() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void S3::set_has_s3_11() {
  _has_bits_[0] |= 0x00001000u;
}
inline void S3::clear_has_s3_11() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void S3::clear_s3_11() {
  s3_11_ = 1;
  clear_has_s3_11();
}
inline ::E1 S3::s3_11() const {
  // @@protoc_insertion_point(field_get:S3.s3_11)
  return static_cast< ::E1 >(s3_11_);
}
inline void S3::set_s3_11(::E1 value) {
  assert(::E1_IsValid(value));
  set_has_s3_11();
  s3_11_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_11)
}

// optional bool s3_12 = 12;
inline bool S3::has_s3_12() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void S3::set_has_s3_12() {
  _has_bits_[0] |= 0x00002000u;
}
inline void S3::clear_has_s3_12() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void S3::clear_s3_12() {
  s3_12_ = false;
  clear_has_s3_12();
}
inline bool S3::s3_12() const {
  // @@protoc_insertion_point(field_get:S3.s3_12)
  return s3_12_;
}
inline void S3::set_s3_12(bool value) {
  set_has_s3_12();
  s3_12_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_12)
}

// optional float s3_13 = 13;
inline bool S3::has_s3_13() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void S3::set_has_s3_13() {
  _has_bits_[0] |= 0x00004000u;
}
inline void S3::clear_has_s3_13() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void S3::clear_s3_13() {
  s3_13_ = 0;
  clear_has_s3_13();
}
inline float S3::s3_13() const {
  // @@protoc_insertion_point(field_get:S3.s3_13)
  return s3_13_;
}
inline void S3::set_s3_13(float value) {
  set_has_s3_13();
  s3_13_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_13)
}

// optional fixed32 s3_14 = 14;
inline bool S3::has_s3_14() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void S3::set_has_s3_14() {
  _has_bits_[0] |= 0x00008000u;
}
inline void S3::clear_has_s3_14() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void S3::clear_s3_14() {
  s3_14_ = 0u;
  clear_has_s3_14();
}
inline ::google::protobuf::uint32 S3::s3_14() const {
  // @@protoc_insertion_point(field_get:S3.s3_14)
  return s3_14_;
}
inline void S3::set_s3_14(::google::protobuf::uint32 value) {
  set_has_s3_14();
  s3_14_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_14)
}

// optional sfixed32 s3_15 = 15;
inline bool S3::has_s3_15() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void S3::set_has_s3_15() {
  _has_bits_[0] |= 0x00010000u;
}
inline void S3::clear_has_s3_15() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void S3::clear_s3_15() {
  s3_15_ = 0;
  clear_has_s3_15();
}
inline ::google::protobuf::int32 S3::s3_15() const {
  // @@protoc_insertion_point(field_get:S3.s3_15)
  return s3_15_;
}
inline void S3::set_s3_15(::google::protobuf::int32 value) {
  set_has_s3_15();
  s3_15_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_15)
}

// optional double s3_16 = 16;
inline bool S3::has_s3_16() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void S3::set_has_s3_16() {
  _has_bits_[0] |= 0x00020000u;
}
inline void S3::clear_has_s3_16() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void S3::clear_s3_16() {
  s3_16_ = 0;
  clear_has_s3_16();
}
inline double S3::s3_16() const {
  // @@protoc_insertion_point(field_get:S3.s3_16)
  return s3_16_;
}
inline void S3::set_s3_16(double value) {
  set_has_s3_16();
  s3_16_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_16)
}

// optional fixed64 s3_17 = 17;
inline bool S3::has_s3_17() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void S3::set_has_s3_17() {
  _has_bits_[0] |= 0x00040000u;
}
inline void S3::clear_has_s3_17() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void S3::clear_s3_17() {
  s3_17_ = GOOGLE_ULONGLONG(0);
  clear_has_s3_17();
}
inline ::google::protobuf::uint64 S3::s3_17() const {
  // @@protoc_insertion_point(field_get:S3.s3_17)
  return s3_17_;
}
inline void S3::set_s3_17(::google::protobuf::uint64 value) {
  set_has_s3_17();
  s3_17_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_17)
}

// optional sfixed64 s3_18 = 18;
inline bool S3::has_s3_18() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void S3::set_has_s3_18() {
  _has_bits_[0] |= 0x00080000u;
}
inline void S3::clear_has_s3_18() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void S3::clear_s3_18() {
  s3_18_ = GOOGLE_LONGLONG(0);
  clear_has_s3_18();
}
inline ::google::protobuf::int64 S3::s3_18() const {
  // @@protoc_insertion_point(field_get:S3.s3_18)
  return s3_18_;
}
inline void S3::set_s3_18(::google::protobuf::int64 value) {
  set_has_s3_18();
  s3_18_ = value;
  // @@protoc_insertion_point(field_set:S3.s3_18)
}

// optional string s3_19 = 19;
inline bool S3::has_s3_19() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void S3::set_has_s3_19() {
  _has_bits_[0] |= 0x00100000u;
}
inline void S3::clear_has_s3_19() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void S3::clear_s3_19() {
  if (s3_19_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_19_->clear();
  }
  clear_has_s3_19();
}
inline const ::std::string& S3::s3_19() const {
  // @@protoc_insertion_point(field_get:S3.s3_19)
  return *s3_19_;
}
inline void S3::set_s3_19(const ::std::string& value) {
  set_has_s3_19();
  if (s3_19_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_19_ = new ::std::string;
  }
  s3_19_->assign(value);
  // @@protoc_insertion_point(field_set:S3.s3_19)
}
inline void S3::set_s3_19(const char* value) {
  set_has_s3_19();
  if (s3_19_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_19_ = new ::std::string;
  }
  s3_19_->assign(value);
  // @@protoc_insertion_point(field_set_char:S3.s3_19)
}
inline void S3::set_s3_19(const char* value, size_t size) {
  set_has_s3_19();
  if (s3_19_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_19_ = new ::std::string;
  }
  s3_19_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:S3.s3_19)
}
inline ::std::string* S3::mutable_s3_19() {
  set_has_s3_19();
  if (s3_19_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_19_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:S3.s3_19)
  return s3_19_;
}
inline ::std::string* S3::release_s3_19() {
  clear_has_s3_19();
  if (s3_19_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s3_19_;
    s3_19_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S3::set_allocated_s3_19(::std::string* s3_19) {
  if (s3_19_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_19_;
  }
  if (s3_19) {
    set_has_s3_19();
    s3_19_ = s3_19;
  } else {
    clear_has_s3_19();
    s3_19_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:S3.s3_19)
}

// optional bytes s3_20 = 20;
inline bool S3::has_s3_20() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void S3::set_has_s3_20() {
  _has_bits_[0] |= 0x00200000u;
}
inline void S3::clear_has_s3_20() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void S3::clear_s3_20() {
  if (s3_20_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_20_->clear();
  }
  clear_has_s3_20();
}
inline const ::std::string& S3::s3_20() const {
  // @@protoc_insertion_point(field_get:S3.s3_20)
  return *s3_20_;
}
inline void S3::set_s3_20(const ::std::string& value) {
  set_has_s3_20();
  if (s3_20_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_20_ = new ::std::string;
  }
  s3_20_->assign(value);
  // @@protoc_insertion_point(field_set:S3.s3_20)
}
inline void S3::set_s3_20(const char* value) {
  set_has_s3_20();
  if (s3_20_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_20_ = new ::std::string;
  }
  s3_20_->assign(value);
  // @@protoc_insertion_point(field_set_char:S3.s3_20)
}
inline void S3::set_s3_20(const void* value, size_t size) {
  set_has_s3_20();
  if (s3_20_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_20_ = new ::std::string;
  }
  s3_20_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:S3.s3_20)
}
inline ::std::string* S3::mutable_s3_20() {
  set_has_s3_20();
  if (s3_20_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s3_20_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:S3.s3_20)
  return s3_20_;
}
inline ::std::string* S3::release_s3_20() {
  clear_has_s3_20();
  if (s3_20_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s3_20_;
    s3_20_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S3::set_allocated_s3_20(::std::string* s3_20) {
  if (s3_20_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_20_;
  }
  if (s3_20) {
    set_has_s3_20();
    s3_20_ = s3_20;
  } else {
    clear_has_s3_20();
    s3_20_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:S3.s3_20)
}

// repeated int32 s3_21 = 21;
inline int S3::s3_21_size() const {
  return s3_21_.size();
}
inline void S3::clear_s3_21() {
  s3_21_.Clear();
}
inline ::google::protobuf::int32 S3::s3_21(int index) const {
  // @@protoc_insertion_point(field_get:S3.s3_21)
  return s3_21_.Get(index);
}
inline void S3::set_s3_21(int index, ::google::protobuf::int32 value) {
  s3_21_.Set(index, value);
  // @@protoc_insertion_point(field_set:S3.s3_21)
}
inline void S3::add_s3_21(::google::protobuf::int32 value) {
  s3_21_.Add(value);
  // @@protoc_insertion_point(field_add:S3.s3_21)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S3::s3_21() const {
  // @@protoc_insertion_point(field_list:S3.s3_21)
  return s3_21_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S3::mutable_s3_21() {
  // @@protoc_insertion_point(field_mutable_list:S3.s3_21)
  return &s3_21_;
}

// repeated int32 s3_22 = 22 [packed = true];
inline int S3::s3_22_size() const {
  return s3_22_.size();
}
inline void S3::clear_s3_22() {
  s3_22_.Clear();
}
inline ::google::protobuf::int32 S3::s3_22(int index) const {
  // @@protoc_insertion_point(field_get:S3.s3_22)
  return s3_22_.Get(index);
}
inline void S3::set_s3_22(int index, ::google::protobuf::int32 value) {
  s3_22_.Set(index, value);
  // @@protoc_insertion_point(field_set:S3.s3_22)
}
inline void S3::add_s3_22(::google::protobuf::int32 value) {
  s3_22_.Add(value);
  // @@protoc_insertion_point(field_add:S3.s3_22)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S3::s3_22() const {
  // @@protoc_insertion_point(field_list:S3.s3_22)
  return s3_22_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S3::mutable_s3_22() {
  // @@protoc_insertion_point(field_mutable_list:S3.s3_22)
  return &s3_22_;
}

// repeated string s3_23 = 23;
inline int S3::s3_23_size() const {
  return s3_23_.size();
}
inline void S3::clear_s3_23() {
  s3_23_.Clear();
}
inline const ::std::string& S3::s3_23(int index) const {
  // @@protoc_insertion_point(field_get:S3.s3_23)
  return s3_23_.Get(index);
}
inline ::std::string* S3::mutable_s3_23(int index) {
  // @@protoc_insertion_point(field_mutable:S3.s3_23)
  return s3_23_.Mutable(index);
}
inline void S3::set_s3_23(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:S3.s3_23)
  s3_23_.Mutable(index)->assign(value);
}
inline void S3::set_s3_23(int index, const char* value) {
  s3_23_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:S3.s3_23)
}
inline void S3::set_s3_23(int index, const char* value, size_t size) {
  s3_23_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:S3.s3_23)
}
inline ::std::string* S3::add_s3_23() {
  return s3_23_.Add();
}
inline void S3::add_s3_23(const ::std::string& value) {
  s3_23_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:S3.s3_23)
}
inline void S3::add_s3_23(const char* value) {
  s3_23_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:S3.s3_23)
}
inline void S3::add_s3_23(const char* value, size_t size) {
  s3_23_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:S3.s3_23)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S3::s3_23() const {
  // @@protoc_insertion_point(field_list:S3.s3_23)
  return s3_23_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S3::mutable_s3_23() {
  // @@protoc_insertion_point(field_mutable_list:S3.s3_23)
  return &s3_23_;
}

// optional .S2 s3_24 = 24;
inline bool S3::has_s3_24() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void S3::set_has_s3_24() {
  _has_bits_[0] |= 0x02000000u;
}
inline void S3::clear_has_s3_24() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void S3::clear_s3_24() {
  if (s3_24_ != NULL) s3_24_->::S2::Clear();
  clear_has_s3_24();
}
inline const ::S2& S3::s3_24() const {
  // @@protoc_insertion_point(field_get:S3.s3_24)
  return s3_24_ != NULL ? *s3_24_ : *default_instance_->s3_24_;
}
inline ::S2* S3::mutable_s3_24() {
  set_has_s3_24();
  if (s3_24_ == NULL) s3_24_ = new ::S2;
  // @@protoc_insertion_point(field_mutable:S3.s3_24)
  return s3_24_;
}
inline ::S2* S3::release_s3_24() {
  clear_has_s3_24();
  ::S2* temp = s3_24_;
  s3_24_ = NULL;
  return temp;
}
inline void S3::set_allocated_s3_24(::S2* s3_24) {
  delete s3_24_;
  s3_24_ = s3_24;
  if (s3_24) {
    set_has_s3_24();
  } else {
    clear_has_s3_24();
  }
  // @@protoc_insertion_point(field_set_allocated:S3.s3_24)
}

// repeated .S2 s3_25 = 25;
inline int S3::s3_25_size() const {
  return s3_25_.size();
}
inline void S3::clear_s3_25() {
  s3_25_.Clear();
}
inline const ::S2& S3::s3_25(int index) const {
  // @@protoc_insertion_point(field_get:S3.s3_25)
  return s3_25_.Get(index);
}
inline ::S2* S3::mutable_s3_25(int index) {
  // @@protoc_insertion_point(field_mutable:S3.s3_25)
  return s3_25_.Mutable(index);
}
inline ::S2* S3::add_s3_25() {
  // @@protoc_insertion_point(field_add:S3.s3_25)
  return s3_25_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::S2 >&
S3::s3_25() const {
  // @@protoc_insertion_point(field_list:S3.s3_25)
  return s3_25_;
}
inline ::google::protobuf::RepeatedPtrField< ::S2 >*
S3::mutable_s3_25() {
  // @@protoc_insertion_point(field_mutable_list:S3.s3_25)
  return &s3_25_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::E1> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E1>() {
  return ::E1_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5ftest_5f03_2eproto__INCLUDED
