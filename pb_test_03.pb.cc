// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_test_03.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_test_03.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* S1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5ftest_5f03_2eproto() {
  protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_test_03.proto");
  GOOGLE_CHECK(file != NULL);
  S1_descriptor_ = file->message_type(0);
  static const int S1_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_t_),
  };
  S1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S1_descriptor_,
      S1::default_instance_,
      S1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5ftest_5f03_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S1_descriptor_, &S1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5ftest_5f03_2eproto() {
  delete S1::default_instance_;
  delete S1_reflection_;
}

void protobuf_AddDesc_pb_5ftest_5f03_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020pb_test_03.proto\"\234\002\n\002S1\022\014\n\004s1_a\030\001 \001(\005\022"
    "\014\n\004s1_b\030\002 \001(\005\022\014\n\004s1_c\030\003 \001(\005\022\014\n\004s1_d\030\004 \001("
    "\005\022\014\n\004s1_e\030\005 \001(\005\022\014\n\004s1_f\030\006 \001(\005\022\014\n\004s1_g\030\007 "
    "\001(\005\022\014\n\004s1_h\030\010 \001(\005\022\014\n\004s1_i\030\t \001(\005\022\014\n\004s1_j\030"
    "\n \001(\005\022\014\n\004s1_k\030\013 \001(\005\022\014\n\004s1_l\030\014 \001(\005\022\014\n\004s1_"
    "m\030\r \001(\005\022\014\n\004s1_n\030\016 \001(\005\022\014\n\004s1_o\030\017 \001(\005\022\014\n\004s"
    "1_p\030\020 \001(\005\022\014\n\004s1_q\030\021 \001(\005\022\014\n\004s1_r\030\022 \001(\005\022\014\n"
    "\004s1_s\030\023 \001(\005\022\014\n\004s1_t\030\024 \001(\005", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_test_03.proto", &protobuf_RegisterTypes);
  S1::default_instance_ = new S1();
  S1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5ftest_5f03_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5ftest_5f03_2eproto {
  StaticDescriptorInitializer_pb_5ftest_5f03_2eproto() {
    protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  }
} static_descriptor_initializer_pb_5ftest_5f03_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int S1::kS1AFieldNumber;
const int S1::kS1BFieldNumber;
const int S1::kS1CFieldNumber;
const int S1::kS1DFieldNumber;
const int S1::kS1EFieldNumber;
const int S1::kS1FFieldNumber;
const int S1::kS1GFieldNumber;
const int S1::kS1HFieldNumber;
const int S1::kS1IFieldNumber;
const int S1::kS1JFieldNumber;
const int S1::kS1KFieldNumber;
const int S1::kS1LFieldNumber;
const int S1::kS1MFieldNumber;
const int S1::kS1NFieldNumber;
const int S1::kS1OFieldNumber;
const int S1::kS1PFieldNumber;
const int S1::kS1QFieldNumber;
const int S1::kS1RFieldNumber;
const int S1::kS1SFieldNumber;
const int S1::kS1TFieldNumber;
#endif  // !_MSC_VER

S1::S1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:S1)
}

void S1::InitAsDefaultInstance() {
}

S1::S1(const S1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:S1)
}

void S1::SharedCtor() {
  _cached_size_ = 0;
  s1_a_ = 0;
  s1_b_ = 0;
  s1_c_ = 0;
  s1_d_ = 0;
  s1_e_ = 0;
  s1_f_ = 0;
  s1_g_ = 0;
  s1_h_ = 0;
  s1_i_ = 0;
  s1_j_ = 0;
  s1_k_ = 0;
  s1_l_ = 0;
  s1_m_ = 0;
  s1_n_ = 0;
  s1_o_ = 0;
  s1_p_ = 0;
  s1_q_ = 0;
  s1_r_ = 0;
  s1_s_ = 0;
  s1_t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S1::~S1() {
  // @@protoc_insertion_point(destructor:S1)
  SharedDtor();
}

void S1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S1_descriptor_;
}

const S1& S1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  return *default_instance_;
}

S1* S1::default_instance_ = NULL;

S1* S1::New() const {
  return new S1;
}

void S1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<S1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(s1_a_, s1_h_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(s1_i_, s1_p_);
  }
  ZR_(s1_q_, s1_t_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s1_a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_a_)));
          set_has_s1_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_s1_b;
        break;
      }

      // optional int32 s1_b = 2;
      case 2: {
        if (tag == 16) {
         parse_s1_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_b_)));
          set_has_s1_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_s1_c;
        break;
      }

      // optional int32 s1_c = 3;
      case 3: {
        if (tag == 24) {
         parse_s1_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_c_)));
          set_has_s1_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_s1_d;
        break;
      }

      // optional int32 s1_d = 4;
      case 4: {
        if (tag == 32) {
         parse_s1_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_d_)));
          set_has_s1_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_s1_e;
        break;
      }

      // optional int32 s1_e = 5;
      case 5: {
        if (tag == 40) {
         parse_s1_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_e_)));
          set_has_s1_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_s1_f;
        break;
      }

      // optional int32 s1_f = 6;
      case 6: {
        if (tag == 48) {
         parse_s1_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_f_)));
          set_has_s1_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_s1_g;
        break;
      }

      // optional int32 s1_g = 7;
      case 7: {
        if (tag == 56) {
         parse_s1_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_g_)));
          set_has_s1_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_s1_h;
        break;
      }

      // optional int32 s1_h = 8;
      case 8: {
        if (tag == 64) {
         parse_s1_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_h_)));
          set_has_s1_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_s1_i;
        break;
      }

      // optional int32 s1_i = 9;
      case 9: {
        if (tag == 72) {
         parse_s1_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_i_)));
          set_has_s1_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_s1_j;
        break;
      }

      // optional int32 s1_j = 10;
      case 10: {
        if (tag == 80) {
         parse_s1_j:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_j_)));
          set_has_s1_j();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_s1_k;
        break;
      }

      // optional int32 s1_k = 11;
      case 11: {
        if (tag == 88) {
         parse_s1_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_k_)));
          set_has_s1_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_s1_l;
        break;
      }

      // optional int32 s1_l = 12;
      case 12: {
        if (tag == 96) {
         parse_s1_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_l_)));
          set_has_s1_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_s1_m;
        break;
      }

      // optional int32 s1_m = 13;
      case 13: {
        if (tag == 104) {
         parse_s1_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_m_)));
          set_has_s1_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_s1_n;
        break;
      }

      // optional int32 s1_n = 14;
      case 14: {
        if (tag == 112) {
         parse_s1_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_n_)));
          set_has_s1_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_s1_o;
        break;
      }

      // optional int32 s1_o = 15;
      case 15: {
        if (tag == 120) {
         parse_s1_o:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_o_)));
          set_has_s1_o();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_s1_p;
        break;
      }

      // optional int32 s1_p = 16;
      case 16: {
        if (tag == 128) {
         parse_s1_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_p_)));
          set_has_s1_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_s1_q;
        break;
      }

      // optional int32 s1_q = 17;
      case 17: {
        if (tag == 136) {
         parse_s1_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_q_)));
          set_has_s1_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_s1_r;
        break;
      }

      // optional int32 s1_r = 18;
      case 18: {
        if (tag == 144) {
         parse_s1_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_r_)));
          set_has_s1_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_s1_s;
        break;
      }

      // optional int32 s1_s = 19;
      case 19: {
        if (tag == 152) {
         parse_s1_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_s_)));
          set_has_s1_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_s1_t;
        break;
      }

      // optional int32 s1_t = 20;
      case 20: {
        if (tag == 160) {
         parse_s1_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s1_t_)));
          set_has_s1_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S1)
  return false;
#undef DO_
}

void S1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S1)
  // optional int32 s1_a = 1;
  if (has_s1_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s1_a(), output);
  }

  // optional int32 s1_b = 2;
  if (has_s1_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->s1_b(), output);
  }

  // optional int32 s1_c = 3;
  if (has_s1_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->s1_c(), output);
  }

  // optional int32 s1_d = 4;
  if (has_s1_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->s1_d(), output);
  }

  // optional int32 s1_e = 5;
  if (has_s1_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->s1_e(), output);
  }

  // optional int32 s1_f = 6;
  if (has_s1_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->s1_f(), output);
  }

  // optional int32 s1_g = 7;
  if (has_s1_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->s1_g(), output);
  }

  // optional int32 s1_h = 8;
  if (has_s1_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->s1_h(), output);
  }

  // optional int32 s1_i = 9;
  if (has_s1_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->s1_i(), output);
  }

  // optional int32 s1_j = 10;
  if (has_s1_j()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->s1_j(), output);
  }

  // optional int32 s1_k = 11;
  if (has_s1_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->s1_k(), output);
  }

  // optional int32 s1_l = 12;
  if (has_s1_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->s1_l(), output);
  }

  // optional int32 s1_m = 13;
  if (has_s1_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->s1_m(), output);
  }

  // optional int32 s1_n = 14;
  if (has_s1_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->s1_n(), output);
  }

  // optional int32 s1_o = 15;
  if (has_s1_o()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->s1_o(), output);
  }

  // optional int32 s1_p = 16;
  if (has_s1_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->s1_p(), output);
  }

  // optional int32 s1_q = 17;
  if (has_s1_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->s1_q(), output);
  }

  // optional int32 s1_r = 18;
  if (has_s1_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->s1_r(), output);
  }

  // optional int32 s1_s = 19;
  if (has_s1_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->s1_s(), output);
  }

  // optional int32 s1_t = 20;
  if (has_s1_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->s1_t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S1)
}

::google::protobuf::uint8* S1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:S1)
  // optional int32 s1_a = 1;
  if (has_s1_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s1_a(), target);
  }

  // optional int32 s1_b = 2;
  if (has_s1_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->s1_b(), target);
  }

  // optional int32 s1_c = 3;
  if (has_s1_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->s1_c(), target);
  }

  // optional int32 s1_d = 4;
  if (has_s1_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->s1_d(), target);
  }

  // optional int32 s1_e = 5;
  if (has_s1_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->s1_e(), target);
  }

  // optional int32 s1_f = 6;
  if (has_s1_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->s1_f(), target);
  }

  // optional int32 s1_g = 7;
  if (has_s1_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->s1_g(), target);
  }

  // optional int32 s1_h = 8;
  if (has_s1_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->s1_h(), target);
  }

  // optional int32 s1_i = 9;
  if (has_s1_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->s1_i(), target);
  }

  // optional int32 s1_j = 10;
  if (has_s1_j()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->s1_j(), target);
  }

  // optional int32 s1_k = 11;
  if (has_s1_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->s1_k(), target);
  }

  // optional int32 s1_l = 12;
  if (has_s1_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->s1_l(), target);
  }

  // optional int32 s1_m = 13;
  if (has_s1_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->s1_m(), target);
  }

  // optional int32 s1_n = 14;
  if (has_s1_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->s1_n(), target);
  }

  // optional int32 s1_o = 15;
  if (has_s1_o()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->s1_o(), target);
  }

  // optional int32 s1_p = 16;
  if (has_s1_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->s1_p(), target);
  }

  // optional int32 s1_q = 17;
  if (has_s1_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->s1_q(), target);
  }

  // optional int32 s1_r = 18;
  if (has_s1_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->s1_r(), target);
  }

  // optional int32 s1_s = 19;
  if (has_s1_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->s1_s(), target);
  }

  // optional int32 s1_t = 20;
  if (has_s1_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->s1_t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S1)
  return target;
}

int S1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 s1_a = 1;
    if (has_s1_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_a());
    }

    // optional int32 s1_b = 2;
    if (has_s1_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_b());
    }

    // optional int32 s1_c = 3;
    if (has_s1_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_c());
    }

    // optional int32 s1_d = 4;
    if (has_s1_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_d());
    }

    // optional int32 s1_e = 5;
    if (has_s1_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_e());
    }

    // optional int32 s1_f = 6;
    if (has_s1_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_f());
    }

    // optional int32 s1_g = 7;
    if (has_s1_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_g());
    }

    // optional int32 s1_h = 8;
    if (has_s1_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_h());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 s1_i = 9;
    if (has_s1_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_i());
    }

    // optional int32 s1_j = 10;
    if (has_s1_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_j());
    }

    // optional int32 s1_k = 11;
    if (has_s1_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_k());
    }

    // optional int32 s1_l = 12;
    if (has_s1_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_l());
    }

    // optional int32 s1_m = 13;
    if (has_s1_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_m());
    }

    // optional int32 s1_n = 14;
    if (has_s1_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_n());
    }

    // optional int32 s1_o = 15;
    if (has_s1_o()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_o());
    }

    // optional int32 s1_p = 16;
    if (has_s1_p()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_p());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 s1_q = 17;
    if (has_s1_q()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_q());
    }

    // optional int32 s1_r = 18;
    if (has_s1_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_r());
    }

    // optional int32 s1_s = 19;
    if (has_s1_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_s());
    }

    // optional int32 s1_t = 20;
    if (has_s1_t()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s1_t());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S1::MergeFrom(const S1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s1_a()) {
      set_s1_a(from.s1_a());
    }
    if (from.has_s1_b()) {
      set_s1_b(from.s1_b());
    }
    if (from.has_s1_c()) {
      set_s1_c(from.s1_c());
    }
    if (from.has_s1_d()) {
      set_s1_d(from.s1_d());
    }
    if (from.has_s1_e()) {
      set_s1_e(from.s1_e());
    }
    if (from.has_s1_f()) {
      set_s1_f(from.s1_f());
    }
    if (from.has_s1_g()) {
      set_s1_g(from.s1_g());
    }
    if (from.has_s1_h()) {
      set_s1_h(from.s1_h());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_s1_i()) {
      set_s1_i(from.s1_i());
    }
    if (from.has_s1_j()) {
      set_s1_j(from.s1_j());
    }
    if (from.has_s1_k()) {
      set_s1_k(from.s1_k());
    }
    if (from.has_s1_l()) {
      set_s1_l(from.s1_l());
    }
    if (from.has_s1_m()) {
      set_s1_m(from.s1_m());
    }
    if (from.has_s1_n()) {
      set_s1_n(from.s1_n());
    }
    if (from.has_s1_o()) {
      set_s1_o(from.s1_o());
    }
    if (from.has_s1_p()) {
      set_s1_p(from.s1_p());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_s1_q()) {
      set_s1_q(from.s1_q());
    }
    if (from.has_s1_r()) {
      set_s1_r(from.s1_r());
    }
    if (from.has_s1_s()) {
      set_s1_s(from.s1_s());
    }
    if (from.has_s1_t()) {
      set_s1_t(from.s1_t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S1::CopyFrom(const S1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S1::IsInitialized() const {

  return true;
}

void S1::Swap(S1* other) {
  if (other != this) {
    std::swap(s1_a_, other->s1_a_);
    std::swap(s1_b_, other->s1_b_);
    std::swap(s1_c_, other->s1_c_);
    std::swap(s1_d_, other->s1_d_);
    std::swap(s1_e_, other->s1_e_);
    std::swap(s1_f_, other->s1_f_);
    std::swap(s1_g_, other->s1_g_);
    std::swap(s1_h_, other->s1_h_);
    std::swap(s1_i_, other->s1_i_);
    std::swap(s1_j_, other->s1_j_);
    std::swap(s1_k_, other->s1_k_);
    std::swap(s1_l_, other->s1_l_);
    std::swap(s1_m_, other->s1_m_);
    std::swap(s1_n_, other->s1_n_);
    std::swap(s1_o_, other->s1_o_);
    std::swap(s1_p_, other->s1_p_);
    std::swap(s1_q_, other->s1_q_);
    std::swap(s1_r_, other->s1_r_);
    std::swap(s1_s_, other->s1_s_);
    std::swap(s1_t_, other->s1_t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S1_descriptor_;
  metadata.reflection = S1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
