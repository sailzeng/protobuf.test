// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_test_03.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_test_03.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* S1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S1_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2_reflection_ = NULL;
const ::google::protobuf::Descriptor* S3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S3_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* E1_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5ftest_5f03_2eproto() {
  protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_test_03.proto");
  GOOGLE_CHECK(file != NULL);
  S1_descriptor_ = file->message_type(0);
  static const int S1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s2_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s2_2_),
  };
  S1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S1_descriptor_,
      S1::default_instance_,
      S1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S1));
  S2_descriptor_ = file->message_type(1);
  static const int S2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, s2_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, s2_b_),
  };
  S2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2_descriptor_,
      S2::default_instance_,
      S2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2));
  S3_descriptor_ = file->message_type(2);
  static const int S3_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_65_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_66_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_15_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_17_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_18_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_19_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_23_),
  };
  S3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S3_descriptor_,
      S3::default_instance_,
      S3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S3));
  E1_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5ftest_5f03_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S1_descriptor_, &S1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2_descriptor_, &S2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S3_descriptor_, &S3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5ftest_5f03_2eproto() {
  delete S1::default_instance_;
  delete S1_reflection_;
  delete S2::default_instance_;
  delete S2_reflection_;
  delete S3::default_instance_;
  delete S3_reflection_;
}

void protobuf_AddDesc_pb_5ftest_5f03_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020pb_test_03.proto\" \n\002S1\022\014\n\004s2_1\030\001 \001(\005\022\014"
    "\n\004s2_2\030\002 \001(\t\" \n\002S2\022\014\n\004s2_a\030\001 \001(\005\022\014\n\004s2_b"
    "\030\002 \001(\t\"\205\003\n\002S3\022\014\n\004s3_1\030\001 \001(\005\022\014\n\004s3_2\030\002 \001("
    "\005\022\014\n\004s3_3\030\003 \001(\005\022\014\n\004s3_4\030\004 \001(\005\022\014\n\004s3_5\030\005 "
    "\001(\003\022\014\n\004s3_6\030\006 \001(\003\022\014\n\004s3_7\030\007 \001(\r\022\014\n\004s3_8\030"
    "\010 \001(\004\022\014\n\004s3_9\030\t \001(\021\022\r\n\005s3_10\030\n \001(\022\022\r\n\005s3"
    "_64\030@ \001(\005\022\022\n\005s3_65\030A \001(\0162\003.E1\022\r\n\005s3_66\030B"
    " \001(\010\022\r\n\005s3_12\030\014 \001(\002\022\r\n\005s3_13\030\r \001(\007\022\r\n\005s3"
    "_14\030\016 \001(\017\022\r\n\005s3_15\030\017 \001(\001\022\r\n\005s3_16\030\020 \001(\006\022"
    "\r\n\005s3_17\030\021 \001(\020\022\r\n\005s3_18\030\022 \001(\t\022\r\n\005s3_19\030\023"
    " \001(\014\022\r\n\005s3_20\030\024 \003(\005\022\021\n\005s3_21\030\025 \003(\005B\002\020\001\022\022"
    "\n\005s3_22\030\026 \001(\0132\003.S1\022\022\n\005s3_23\030\027 \002(\0132\003.S2*\""
    "\n\002E1\022\010\n\004E1_1\020\000\022\010\n\004E1_2\020\001\022\010\n\004E1_3\020\002", 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_test_03.proto", &protobuf_RegisterTypes);
  S1::default_instance_ = new S1();
  S2::default_instance_ = new S2();
  S3::default_instance_ = new S3();
  S1::default_instance_->InitAsDefaultInstance();
  S2::default_instance_->InitAsDefaultInstance();
  S3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5ftest_5f03_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5ftest_5f03_2eproto {
  StaticDescriptorInitializer_pb_5ftest_5f03_2eproto() {
    protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  }
} static_descriptor_initializer_pb_5ftest_5f03_2eproto_;
const ::google::protobuf::EnumDescriptor* E1_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E1_descriptor_;
}
bool E1_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S1::kS21FieldNumber;
const int S1::kS22FieldNumber;
#endif  // !_MSC_VER

S1::S1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:S1)
}

void S1::InitAsDefaultInstance() {
}

S1::S1(const S1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:S1)
}

void S1::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  s2_1_ = 0;
  s2_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S1::~S1() {
  // @@protoc_insertion_point(destructor:S1)
  SharedDtor();
}

void S1::SharedDtor() {
  if (s2_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s2_2_;
  }
  if (this != default_instance_) {
  }
}

void S1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S1_descriptor_;
}

const S1& S1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  return *default_instance_;
}

S1* S1::default_instance_ = NULL;

S1* S1::New() const {
  return new S1;
}

void S1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    s2_1_ = 0;
    if (has_s2_2()) {
      if (s2_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s2_2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s2_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s2_1_)));
          set_has_s2_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s2_2;
        break;
      }

      // optional string s2_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_s2_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s2_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s2_2().data(), this->s2_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s2_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S1)
  return false;
#undef DO_
}

void S1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S1)
  // optional int32 s2_1 = 1;
  if (has_s2_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s2_1(), output);
  }

  // optional string s2_2 = 2;
  if (has_s2_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s2_2().data(), this->s2_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s2_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s2_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S1)
}

::google::protobuf::uint8* S1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:S1)
  // optional int32 s2_1 = 1;
  if (has_s2_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s2_1(), target);
  }

  // optional string s2_2 = 2;
  if (has_s2_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s2_2().data(), this->s2_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s2_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s2_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S1)
  return target;
}

int S1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 s2_1 = 1;
    if (has_s2_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s2_1());
    }

    // optional string s2_2 = 2;
    if (has_s2_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s2_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S1::MergeFrom(const S1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s2_1()) {
      set_s2_1(from.s2_1());
    }
    if (from.has_s2_2()) {
      set_s2_2(from.s2_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S1::CopyFrom(const S1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S1::IsInitialized() const {

  return true;
}

void S1::Swap(S1* other) {
  if (other != this) {
    std::swap(s2_1_, other->s2_1_);
    std::swap(s2_2_, other->s2_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S1_descriptor_;
  metadata.reflection = S1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2::kS2AFieldNumber;
const int S2::kS2BFieldNumber;
#endif  // !_MSC_VER

S2::S2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:S2)
}

void S2::InitAsDefaultInstance() {
}

S2::S2(const S2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:S2)
}

void S2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  s2_a_ = 0;
  s2_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2::~S2() {
  // @@protoc_insertion_point(destructor:S2)
  SharedDtor();
}

void S2::SharedDtor() {
  if (s2_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s2_b_;
  }
  if (this != default_instance_) {
  }
}

void S2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2_descriptor_;
}

const S2& S2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  return *default_instance_;
}

S2* S2::default_instance_ = NULL;

S2* S2::New() const {
  return new S2;
}

void S2::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    s2_a_ = 0;
    if (has_s2_b()) {
      if (s2_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s2_b_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s2_a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s2_a_)));
          set_has_s2_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s2_b;
        break;
      }

      // optional string s2_b = 2;
      case 2: {
        if (tag == 18) {
         parse_s2_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s2_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s2_b().data(), this->s2_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s2_b");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S2)
  return false;
#undef DO_
}

void S2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S2)
  // optional int32 s2_a = 1;
  if (has_s2_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s2_a(), output);
  }

  // optional string s2_b = 2;
  if (has_s2_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s2_b().data(), this->s2_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s2_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s2_b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S2)
}

::google::protobuf::uint8* S2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:S2)
  // optional int32 s2_a = 1;
  if (has_s2_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s2_a(), target);
  }

  // optional string s2_b = 2;
  if (has_s2_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s2_b().data(), this->s2_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s2_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s2_b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2)
  return target;
}

int S2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 s2_a = 1;
    if (has_s2_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s2_a());
    }

    // optional string s2_b = 2;
    if (has_s2_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s2_b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2::MergeFrom(const S2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s2_a()) {
      set_s2_a(from.s2_a());
    }
    if (from.has_s2_b()) {
      set_s2_b(from.s2_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2::CopyFrom(const S2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2::IsInitialized() const {

  return true;
}

void S2::Swap(S2* other) {
  if (other != this) {
    std::swap(s2_a_, other->s2_a_);
    std::swap(s2_b_, other->s2_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2_descriptor_;
  metadata.reflection = S2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S3::kS31FieldNumber;
const int S3::kS32FieldNumber;
const int S3::kS33FieldNumber;
const int S3::kS34FieldNumber;
const int S3::kS35FieldNumber;
const int S3::kS36FieldNumber;
const int S3::kS37FieldNumber;
const int S3::kS38FieldNumber;
const int S3::kS39FieldNumber;
const int S3::kS310FieldNumber;
const int S3::kS364FieldNumber;
const int S3::kS365FieldNumber;
const int S3::kS366FieldNumber;
const int S3::kS312FieldNumber;
const int S3::kS313FieldNumber;
const int S3::kS314FieldNumber;
const int S3::kS315FieldNumber;
const int S3::kS316FieldNumber;
const int S3::kS317FieldNumber;
const int S3::kS318FieldNumber;
const int S3::kS319FieldNumber;
const int S3::kS320FieldNumber;
const int S3::kS321FieldNumber;
const int S3::kS322FieldNumber;
const int S3::kS323FieldNumber;
#endif  // !_MSC_VER

S3::S3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:S3)
}

void S3::InitAsDefaultInstance() {
  s3_22_ = const_cast< ::S1*>(&::S1::default_instance());
  s3_23_ = const_cast< ::S2*>(&::S2::default_instance());
}

S3::S3(const S3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:S3)
}

void S3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  s3_1_ = 0;
  s3_2_ = 0;
  s3_3_ = 0;
  s3_4_ = 0;
  s3_5_ = GOOGLE_LONGLONG(0);
  s3_6_ = GOOGLE_LONGLONG(0);
  s3_7_ = 0u;
  s3_8_ = GOOGLE_ULONGLONG(0);
  s3_9_ = 0;
  s3_10_ = GOOGLE_LONGLONG(0);
  s3_64_ = 0;
  s3_65_ = 0;
  s3_66_ = false;
  s3_12_ = 0;
  s3_13_ = 0u;
  s3_14_ = 0;
  s3_15_ = 0;
  s3_16_ = GOOGLE_ULONGLONG(0);
  s3_17_ = GOOGLE_LONGLONG(0);
  s3_18_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s3_19_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s3_22_ = NULL;
  s3_23_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S3::~S3() {
  // @@protoc_insertion_point(destructor:S3)
  SharedDtor();
}

void S3::SharedDtor() {
  if (s3_18_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_18_;
  }
  if (s3_19_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_19_;
  }
  if (this != default_instance_) {
    delete s3_22_;
    delete s3_23_;
  }
}

void S3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S3_descriptor_;
}

const S3& S3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5ftest_5f03_2eproto();
  return *default_instance_;
}

S3* S3::default_instance_ = NULL;

S3* S3::New() const {
  return new S3;
}

void S3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<S3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(s3_1_, s3_7_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(s3_9_, s3_14_);
  }
  if (_has_bits_[16 / 32] & 10420224) {
    ZR_(s3_15_, s3_17_);
    if (has_s3_18()) {
      if (s3_18_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s3_18_->clear();
      }
    }
    if (has_s3_19()) {
      if (s3_19_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s3_19_->clear();
      }
    }
    if (has_s3_22()) {
      if (s3_22_ != NULL) s3_22_->::S1::Clear();
    }
  }
  if (has_s3_23()) {
    if (s3_23_ != NULL) s3_23_->::S2::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  s3_20_.Clear();
  s3_21_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:S3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s3_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_1_)));
          set_has_s3_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_s3_2;
        break;
      }

      // optional int32 s3_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_s3_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_2_)));
          set_has_s3_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_s3_3;
        break;
      }

      // optional int32 s3_3 = 3;
      case 3: {
        if (tag == 24) {
         parse_s3_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_3_)));
          set_has_s3_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_s3_4;
        break;
      }

      // optional int32 s3_4 = 4;
      case 4: {
        if (tag == 32) {
         parse_s3_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_4_)));
          set_has_s3_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_s3_5;
        break;
      }

      // optional int64 s3_5 = 5;
      case 5: {
        if (tag == 40) {
         parse_s3_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &s3_5_)));
          set_has_s3_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_s3_6;
        break;
      }

      // optional int64 s3_6 = 6;
      case 6: {
        if (tag == 48) {
         parse_s3_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &s3_6_)));
          set_has_s3_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_s3_7;
        break;
      }

      // optional uint32 s3_7 = 7;
      case 7: {
        if (tag == 56) {
         parse_s3_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s3_7_)));
          set_has_s3_7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_s3_8;
        break;
      }

      // optional uint64 s3_8 = 8;
      case 8: {
        if (tag == 64) {
         parse_s3_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s3_8_)));
          set_has_s3_8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_s3_9;
        break;
      }

      // optional sint32 s3_9 = 9;
      case 9: {
        if (tag == 72) {
         parse_s3_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &s3_9_)));
          set_has_s3_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_s3_10;
        break;
      }

      // optional sint64 s3_10 = 10;
      case 10: {
        if (tag == 80) {
         parse_s3_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &s3_10_)));
          set_has_s3_10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_s3_12;
        break;
      }

      // optional float s3_12 = 12;
      case 12: {
        if (tag == 101) {
         parse_s3_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s3_12_)));
          set_has_s3_12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_s3_13;
        break;
      }

      // optional fixed32 s3_13 = 13;
      case 13: {
        if (tag == 109) {
         parse_s3_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &s3_13_)));
          set_has_s3_13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_s3_14;
        break;
      }

      // optional sfixed32 s3_14 = 14;
      case 14: {
        if (tag == 117) {
         parse_s3_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &s3_14_)));
          set_has_s3_14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_s3_15;
        break;
      }

      // optional double s3_15 = 15;
      case 15: {
        if (tag == 121) {
         parse_s3_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s3_15_)));
          set_has_s3_15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_s3_16;
        break;
      }

      // optional fixed64 s3_16 = 16;
      case 16: {
        if (tag == 129) {
         parse_s3_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &s3_16_)));
          set_has_s3_16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_s3_17;
        break;
      }

      // optional sfixed64 s3_17 = 17;
      case 17: {
        if (tag == 137) {
         parse_s3_17:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &s3_17_)));
          set_has_s3_17();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_s3_18;
        break;
      }

      // optional string s3_18 = 18;
      case 18: {
        if (tag == 146) {
         parse_s3_18:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s3_18()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s3_18().data(), this->s3_18().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s3_18");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_s3_19;
        break;
      }

      // optional bytes s3_19 = 19;
      case 19: {
        if (tag == 154) {
         parse_s3_19:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s3_19()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_s3_20;
        break;
      }

      // repeated int32 s3_20 = 20;
      case 20: {
        if (tag == 160) {
         parse_s3_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_s3_20())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s3_20())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_s3_20;
        if (input->ExpectTag(170)) goto parse_s3_21;
        break;
      }

      // repeated int32 s3_21 = 21 [packed = true];
      case 21: {
        if (tag == 170) {
         parse_s3_21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s3_21())));
        } else if (tag == 168) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 170, input, this->mutable_s3_21())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_s3_22;
        break;
      }

      // optional .S1 s3_22 = 22;
      case 22: {
        if (tag == 178) {
         parse_s3_22:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s3_22()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_s3_23;
        break;
      }

      // required .S2 s3_23 = 23;
      case 23: {
        if (tag == 186) {
         parse_s3_23:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s3_23()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_s3_64;
        break;
      }

      // optional int32 s3_64 = 64;
      case 64: {
        if (tag == 512) {
         parse_s3_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_64_)));
          set_has_s3_64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_s3_65;
        break;
      }

      // optional .E1 s3_65 = 65;
      case 65: {
        if (tag == 520) {
         parse_s3_65:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E1_IsValid(value)) {
            set_s3_65(static_cast< ::E1 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(65, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_s3_66;
        break;
      }

      // optional bool s3_66 = 66;
      case 66: {
        if (tag == 528) {
         parse_s3_66:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &s3_66_)));
          set_has_s3_66();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:S3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:S3)
  return false;
#undef DO_
}

void S3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:S3)
  // optional int32 s3_1 = 1;
  if (has_s3_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s3_1(), output);
  }

  // optional int32 s3_2 = 2;
  if (has_s3_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->s3_2(), output);
  }

  // optional int32 s3_3 = 3;
  if (has_s3_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->s3_3(), output);
  }

  // optional int32 s3_4 = 4;
  if (has_s3_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->s3_4(), output);
  }

  // optional int64 s3_5 = 5;
  if (has_s3_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->s3_5(), output);
  }

  // optional int64 s3_6 = 6;
  if (has_s3_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->s3_6(), output);
  }

  // optional uint32 s3_7 = 7;
  if (has_s3_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->s3_7(), output);
  }

  // optional uint64 s3_8 = 8;
  if (has_s3_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->s3_8(), output);
  }

  // optional sint32 s3_9 = 9;
  if (has_s3_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->s3_9(), output);
  }

  // optional sint64 s3_10 = 10;
  if (has_s3_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->s3_10(), output);
  }

  // optional float s3_12 = 12;
  if (has_s3_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->s3_12(), output);
  }

  // optional fixed32 s3_13 = 13;
  if (has_s3_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->s3_13(), output);
  }

  // optional sfixed32 s3_14 = 14;
  if (has_s3_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->s3_14(), output);
  }

  // optional double s3_15 = 15;
  if (has_s3_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->s3_15(), output);
  }

  // optional fixed64 s3_16 = 16;
  if (has_s3_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->s3_16(), output);
  }

  // optional sfixed64 s3_17 = 17;
  if (has_s3_17()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->s3_17(), output);
  }

  // optional string s3_18 = 18;
  if (has_s3_18()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_18().data(), this->s3_18().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_18");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->s3_18(), output);
  }

  // optional bytes s3_19 = 19;
  if (has_s3_19()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->s3_19(), output);
  }

  // repeated int32 s3_20 = 20;
  for (int i = 0; i < this->s3_20_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->s3_20(i), output);
  }

  // repeated int32 s3_21 = 21 [packed = true];
  if (this->s3_21_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_s3_21_cached_byte_size_);
  }
  for (int i = 0; i < this->s3_21_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->s3_21(i), output);
  }

  // optional .S1 s3_22 = 22;
  if (has_s3_22()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->s3_22(), output);
  }

  // required .S2 s3_23 = 23;
  if (has_s3_23()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->s3_23(), output);
  }

  // optional int32 s3_64 = 64;
  if (has_s3_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->s3_64(), output);
  }

  // optional .E1 s3_65 = 65;
  if (has_s3_65()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      65, this->s3_65(), output);
  }

  // optional bool s3_66 = 66;
  if (has_s3_66()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->s3_66(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:S3)
}

::google::protobuf::uint8* S3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:S3)
  // optional int32 s3_1 = 1;
  if (has_s3_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s3_1(), target);
  }

  // optional int32 s3_2 = 2;
  if (has_s3_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->s3_2(), target);
  }

  // optional int32 s3_3 = 3;
  if (has_s3_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->s3_3(), target);
  }

  // optional int32 s3_4 = 4;
  if (has_s3_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->s3_4(), target);
  }

  // optional int64 s3_5 = 5;
  if (has_s3_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->s3_5(), target);
  }

  // optional int64 s3_6 = 6;
  if (has_s3_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->s3_6(), target);
  }

  // optional uint32 s3_7 = 7;
  if (has_s3_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->s3_7(), target);
  }

  // optional uint64 s3_8 = 8;
  if (has_s3_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->s3_8(), target);
  }

  // optional sint32 s3_9 = 9;
  if (has_s3_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->s3_9(), target);
  }

  // optional sint64 s3_10 = 10;
  if (has_s3_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->s3_10(), target);
  }

  // optional float s3_12 = 12;
  if (has_s3_12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->s3_12(), target);
  }

  // optional fixed32 s3_13 = 13;
  if (has_s3_13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->s3_13(), target);
  }

  // optional sfixed32 s3_14 = 14;
  if (has_s3_14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->s3_14(), target);
  }

  // optional double s3_15 = 15;
  if (has_s3_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->s3_15(), target);
  }

  // optional fixed64 s3_16 = 16;
  if (has_s3_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->s3_16(), target);
  }

  // optional sfixed64 s3_17 = 17;
  if (has_s3_17()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->s3_17(), target);
  }

  // optional string s3_18 = 18;
  if (has_s3_18()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_18().data(), this->s3_18().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_18");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->s3_18(), target);
  }

  // optional bytes s3_19 = 19;
  if (has_s3_19()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->s3_19(), target);
  }

  // repeated int32 s3_20 = 20;
  for (int i = 0; i < this->s3_20_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->s3_20(i), target);
  }

  // repeated int32 s3_21 = 21 [packed = true];
  if (this->s3_21_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _s3_21_cached_byte_size_, target);
  }
  for (int i = 0; i < this->s3_21_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->s3_21(i), target);
  }

  // optional .S1 s3_22 = 22;
  if (has_s3_22()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->s3_22(), target);
  }

  // required .S2 s3_23 = 23;
  if (has_s3_23()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->s3_23(), target);
  }

  // optional int32 s3_64 = 64;
  if (has_s3_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->s3_64(), target);
  }

  // optional .E1 s3_65 = 65;
  if (has_s3_65()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      65, this->s3_65(), target);
  }

  // optional bool s3_66 = 66;
  if (has_s3_66()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->s3_66(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S3)
  return target;
}

int S3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 s3_1 = 1;
    if (has_s3_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_1());
    }

    // optional int32 s3_2 = 2;
    if (has_s3_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_2());
    }

    // optional int32 s3_3 = 3;
    if (has_s3_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_3());
    }

    // optional int32 s3_4 = 4;
    if (has_s3_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_4());
    }

    // optional int64 s3_5 = 5;
    if (has_s3_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->s3_5());
    }

    // optional int64 s3_6 = 6;
    if (has_s3_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->s3_6());
    }

    // optional uint32 s3_7 = 7;
    if (has_s3_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s3_7());
    }

    // optional uint64 s3_8 = 8;
    if (has_s3_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->s3_8());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 s3_9 = 9;
    if (has_s3_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->s3_9());
    }

    // optional sint64 s3_10 = 10;
    if (has_s3_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->s3_10());
    }

    // optional int32 s3_64 = 64;
    if (has_s3_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_64());
    }

    // optional .E1 s3_65 = 65;
    if (has_s3_65()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->s3_65());
    }

    // optional bool s3_66 = 66;
    if (has_s3_66()) {
      total_size += 2 + 1;
    }

    // optional float s3_12 = 12;
    if (has_s3_12()) {
      total_size += 1 + 4;
    }

    // optional fixed32 s3_13 = 13;
    if (has_s3_13()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 s3_14 = 14;
    if (has_s3_14()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double s3_15 = 15;
    if (has_s3_15()) {
      total_size += 1 + 8;
    }

    // optional fixed64 s3_16 = 16;
    if (has_s3_16()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 s3_17 = 17;
    if (has_s3_17()) {
      total_size += 2 + 8;
    }

    // optional string s3_18 = 18;
    if (has_s3_18()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s3_18());
    }

    // optional bytes s3_19 = 19;
    if (has_s3_19()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s3_19());
    }

    // optional .S1 s3_22 = 22;
    if (has_s3_22()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s3_22());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .S2 s3_23 = 23;
    if (has_s3_23()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s3_23());
    }

  }
  // repeated int32 s3_20 = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->s3_20_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s3_20(i));
    }
    total_size += 2 * this->s3_20_size() + data_size;
  }

  // repeated int32 s3_21 = 21 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->s3_21_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s3_21(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _s3_21_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S3::MergeFrom(const S3& from) {
  GOOGLE_CHECK_NE(&from, this);
  s3_20_.MergeFrom(from.s3_20_);
  s3_21_.MergeFrom(from.s3_21_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s3_1()) {
      set_s3_1(from.s3_1());
    }
    if (from.has_s3_2()) {
      set_s3_2(from.s3_2());
    }
    if (from.has_s3_3()) {
      set_s3_3(from.s3_3());
    }
    if (from.has_s3_4()) {
      set_s3_4(from.s3_4());
    }
    if (from.has_s3_5()) {
      set_s3_5(from.s3_5());
    }
    if (from.has_s3_6()) {
      set_s3_6(from.s3_6());
    }
    if (from.has_s3_7()) {
      set_s3_7(from.s3_7());
    }
    if (from.has_s3_8()) {
      set_s3_8(from.s3_8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_s3_9()) {
      set_s3_9(from.s3_9());
    }
    if (from.has_s3_10()) {
      set_s3_10(from.s3_10());
    }
    if (from.has_s3_64()) {
      set_s3_64(from.s3_64());
    }
    if (from.has_s3_65()) {
      set_s3_65(from.s3_65());
    }
    if (from.has_s3_66()) {
      set_s3_66(from.s3_66());
    }
    if (from.has_s3_12()) {
      set_s3_12(from.s3_12());
    }
    if (from.has_s3_13()) {
      set_s3_13(from.s3_13());
    }
    if (from.has_s3_14()) {
      set_s3_14(from.s3_14());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_s3_15()) {
      set_s3_15(from.s3_15());
    }
    if (from.has_s3_16()) {
      set_s3_16(from.s3_16());
    }
    if (from.has_s3_17()) {
      set_s3_17(from.s3_17());
    }
    if (from.has_s3_18()) {
      set_s3_18(from.s3_18());
    }
    if (from.has_s3_19()) {
      set_s3_19(from.s3_19());
    }
    if (from.has_s3_22()) {
      mutable_s3_22()->::S1::MergeFrom(from.s3_22());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_s3_23()) {
      mutable_s3_23()->::S2::MergeFrom(from.s3_23());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S3::CopyFrom(const S3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3::IsInitialized() const {
  if ((_has_bits_[0] & 0x01000000) != 0x01000000) return false;

  return true;
}

void S3::Swap(S3* other) {
  if (other != this) {
    std::swap(s3_1_, other->s3_1_);
    std::swap(s3_2_, other->s3_2_);
    std::swap(s3_3_, other->s3_3_);
    std::swap(s3_4_, other->s3_4_);
    std::swap(s3_5_, other->s3_5_);
    std::swap(s3_6_, other->s3_6_);
    std::swap(s3_7_, other->s3_7_);
    std::swap(s3_8_, other->s3_8_);
    std::swap(s3_9_, other->s3_9_);
    std::swap(s3_10_, other->s3_10_);
    std::swap(s3_64_, other->s3_64_);
    std::swap(s3_65_, other->s3_65_);
    std::swap(s3_66_, other->s3_66_);
    std::swap(s3_12_, other->s3_12_);
    std::swap(s3_13_, other->s3_13_);
    std::swap(s3_14_, other->s3_14_);
    std::swap(s3_15_, other->s3_15_);
    std::swap(s3_16_, other->s3_16_);
    std::swap(s3_17_, other->s3_17_);
    std::swap(s3_18_, other->s3_18_);
    std::swap(s3_19_, other->s3_19_);
    s3_20_.Swap(&other->s3_20_);
    s3_21_.Swap(&other->s3_21_);
    std::swap(s3_22_, other->s3_22_);
    std::swap(s3_23_, other->s3_23_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S3_descriptor_;
  metadata.reflection = S3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
