// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_02.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_02.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace N01 {
namespace N02 {

namespace {

const ::google::protobuf::Descriptor* S1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S1_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2_reflection_ = NULL;
const ::google::protobuf::Descriptor* S3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S3_reflection_ = NULL;
const ::google::protobuf::Descriptor* S3_S4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S3_S4_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* S3_E1_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5f02_2eproto() {
  protobuf_AddDesc_test_5f02_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test_02.proto");
  GOOGLE_CHECK(file != NULL);
  S1_descriptor_ = file->message_type(0);
  static const int S1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, s1_b_),
  };
  S1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S1_descriptor_,
      S1::default_instance_,
      S1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S1));
  S2_descriptor_ = file->message_type(1);
  static const int S2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, s2_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, s2_b_),
  };
  S2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2_descriptor_,
      S2::default_instance_,
      S2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2));
  S3_descriptor_ = file->message_type(2);
  static const int S3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, s3_f_),
  };
  S3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S3_descriptor_,
      S3::default_instance_,
      S3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S3));
  S3_S4_descriptor_ = S3_descriptor_->nested_type(0);
  static const int S3_S4_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3_S4, s4_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3_S4, s4_b_),
  };
  S3_S4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S3_S4_descriptor_,
      S3_S4::default_instance_,
      S3_S4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3_S4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S3_S4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S3_S4));
  S3_E1_descriptor_ = S3_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_5f02_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S1_descriptor_, &S1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2_descriptor_, &S2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S3_descriptor_, &S3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S3_S4_descriptor_, &S3_S4::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5f02_2eproto() {
  delete S1::default_instance_;
  delete S1_reflection_;
  delete S2::default_instance_;
  delete S2_reflection_;
  delete S3::default_instance_;
  delete S3_reflection_;
  delete S3_S4::default_instance_;
  delete S3_S4_reflection_;
}

void protobuf_AddDesc_test_5f02_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtest_02.proto\022\007N01.N02\" \n\002S1\022\014\n\004s1_a\030\001"
    " \003(\005\022\014\n\004s1_b\030\002 \003(\005\" \n\002S2\022\014\n\004s2_a\030\001 \003(\005\022\014"
    "\n\004s2_b\030\002 \003(\t\"\336\001\n\002S3\022\014\n\004s3_a\030\001 \002(\005\022\014\n\004s3_"
    "b\030\002 \002(\t\022\014\n\004s3_c\030\003 \001(\t\022\031\n\004s3_d\030\004 \003(\0132\013.N0"
    "1.N02.S1\022\031\n\004s3_e\030\005 \002(\0132\013.N01.N02.S3\022\034\n\004s"
    "3_f\030\006 \003(\0132\016.N01.N02.S3.S4\0326\n\002S4\022\"\n\004s4_a\030"
    "\001 \001(\0162\016.N01.N02.S3.E1:\004E1_A\022\014\n\004s4_b\030\002 \002("
    "\t\"\"\n\002E1\022\010\n\004E1_A\020\000\022\010\n\004E1_B\020\001\022\010\n\004E1_C\020\002", 317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_02.proto", &protobuf_RegisterTypes);
  S1::default_instance_ = new S1();
  S2::default_instance_ = new S2();
  S3::default_instance_ = new S3();
  S3_S4::default_instance_ = new S3_S4();
  S1::default_instance_->InitAsDefaultInstance();
  S2::default_instance_->InitAsDefaultInstance();
  S3::default_instance_->InitAsDefaultInstance();
  S3_S4::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5f02_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5f02_2eproto {
  StaticDescriptorInitializer_test_5f02_2eproto() {
    protobuf_AddDesc_test_5f02_2eproto();
  }
} static_descriptor_initializer_test_5f02_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int S1::kS1AFieldNumber;
const int S1::kS1BFieldNumber;
#endif  // !_MSC_VER

S1::S1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N01.N02.S1)
}

void S1::InitAsDefaultInstance() {
}

S1::S1(const S1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N01.N02.S1)
}

void S1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S1::~S1() {
  // @@protoc_insertion_point(destructor:N01.N02.S1)
  SharedDtor();
}

void S1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S1_descriptor_;
}

const S1& S1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5f02_2eproto();
  return *default_instance_;
}

S1* S1::default_instance_ = NULL;

S1* S1::New() const {
  return new S1;
}

void S1::Clear() {
  s1_a_.Clear();
  s1_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N01.N02.S1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 s1_a = 1;
      case 1: {
        if (tag == 8) {
         parse_s1_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_s1_a())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s1_a())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_s1_a;
        if (input->ExpectTag(16)) goto parse_s1_b;
        break;
      }

      // repeated int32 s1_b = 2;
      case 2: {
        if (tag == 16) {
         parse_s1_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_s1_b())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s1_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_s1_b;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N01.N02.S1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N01.N02.S1)
  return false;
#undef DO_
}

void S1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N01.N02.S1)
  // repeated int32 s1_a = 1;
  for (int i = 0; i < this->s1_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->s1_a(i), output);
  }

  // repeated int32 s1_b = 2;
  for (int i = 0; i < this->s1_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->s1_b(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N01.N02.S1)
}

::google::protobuf::uint8* S1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N01.N02.S1)
  // repeated int32 s1_a = 1;
  for (int i = 0; i < this->s1_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->s1_a(i), target);
  }

  // repeated int32 s1_b = 2;
  for (int i = 0; i < this->s1_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->s1_b(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N01.N02.S1)
  return target;
}

int S1::ByteSize() const {
  int total_size = 0;

  // repeated int32 s1_a = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->s1_a_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s1_a(i));
    }
    total_size += 1 * this->s1_a_size() + data_size;
  }

  // repeated int32 s1_b = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->s1_b_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s1_b(i));
    }
    total_size += 1 * this->s1_b_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S1::MergeFrom(const S1& from) {
  GOOGLE_CHECK_NE(&from, this);
  s1_a_.MergeFrom(from.s1_a_);
  s1_b_.MergeFrom(from.s1_b_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S1::CopyFrom(const S1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S1::IsInitialized() const {

  return true;
}

void S1::Swap(S1* other) {
  if (other != this) {
    s1_a_.Swap(&other->s1_a_);
    s1_b_.Swap(&other->s1_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S1_descriptor_;
  metadata.reflection = S1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2::kS2AFieldNumber;
const int S2::kS2BFieldNumber;
#endif  // !_MSC_VER

S2::S2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N01.N02.S2)
}

void S2::InitAsDefaultInstance() {
}

S2::S2(const S2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N01.N02.S2)
}

void S2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2::~S2() {
  // @@protoc_insertion_point(destructor:N01.N02.S2)
  SharedDtor();
}

void S2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2_descriptor_;
}

const S2& S2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5f02_2eproto();
  return *default_instance_;
}

S2* S2::default_instance_ = NULL;

S2* S2::New() const {
  return new S2;
}

void S2::Clear() {
  s2_a_.Clear();
  s2_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N01.N02.S2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 s2_a = 1;
      case 1: {
        if (tag == 8) {
         parse_s2_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_s2_a())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s2_a())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_s2_a;
        if (input->ExpectTag(18)) goto parse_s2_b;
        break;
      }

      // repeated string s2_b = 2;
      case 2: {
        if (tag == 18) {
         parse_s2_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_s2_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s2_b(this->s2_b_size() - 1).data(),
            this->s2_b(this->s2_b_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s2_b");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s2_b;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N01.N02.S2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N01.N02.S2)
  return false;
#undef DO_
}

void S2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N01.N02.S2)
  // repeated int32 s2_a = 1;
  for (int i = 0; i < this->s2_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->s2_a(i), output);
  }

  // repeated string s2_b = 2;
  for (int i = 0; i < this->s2_b_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->s2_b(i).data(), this->s2_b(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "s2_b");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->s2_b(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N01.N02.S2)
}

::google::protobuf::uint8* S2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N01.N02.S2)
  // repeated int32 s2_a = 1;
  for (int i = 0; i < this->s2_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->s2_a(i), target);
  }

  // repeated string s2_b = 2;
  for (int i = 0; i < this->s2_b_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s2_b(i).data(), this->s2_b(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s2_b");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->s2_b(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N01.N02.S2)
  return target;
}

int S2::ByteSize() const {
  int total_size = 0;

  // repeated int32 s2_a = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->s2_a_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s2_a(i));
    }
    total_size += 1 * this->s2_a_size() + data_size;
  }

  // repeated string s2_b = 2;
  total_size += 1 * this->s2_b_size();
  for (int i = 0; i < this->s2_b_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->s2_b(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2::MergeFrom(const S2& from) {
  GOOGLE_CHECK_NE(&from, this);
  s2_a_.MergeFrom(from.s2_a_);
  s2_b_.MergeFrom(from.s2_b_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2::CopyFrom(const S2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2::IsInitialized() const {

  return true;
}

void S2::Swap(S2* other) {
  if (other != this) {
    s2_a_.Swap(&other->s2_a_);
    s2_b_.Swap(&other->s2_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2_descriptor_;
  metadata.reflection = S2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* S3_E1_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S3_E1_descriptor_;
}
bool S3_E1_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const S3_E1 S3::E1_A;
const S3_E1 S3::E1_B;
const S3_E1 S3::E1_C;
const S3_E1 S3::E1_MIN;
const S3_E1 S3::E1_MAX;
const int S3::E1_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int S3_S4::kS4AFieldNumber;
const int S3_S4::kS4BFieldNumber;
#endif  // !_MSC_VER

S3_S4::S3_S4()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N01.N02.S3.S4)
}

void S3_S4::InitAsDefaultInstance() {
}

S3_S4::S3_S4(const S3_S4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N01.N02.S3.S4)
}

void S3_S4::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  s4_a_ = 0;
  s4_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S3_S4::~S3_S4() {
  // @@protoc_insertion_point(destructor:N01.N02.S3.S4)
  SharedDtor();
}

void S3_S4::SharedDtor() {
  if (s4_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s4_b_;
  }
  if (this != default_instance_) {
  }
}

void S3_S4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S3_S4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S3_S4_descriptor_;
}

const S3_S4& S3_S4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5f02_2eproto();
  return *default_instance_;
}

S3_S4* S3_S4::default_instance_ = NULL;

S3_S4* S3_S4::New() const {
  return new S3_S4;
}

void S3_S4::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    s4_a_ = 0;
    if (has_s4_b()) {
      if (s4_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s4_b_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S3_S4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N01.N02.S3.S4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .N01.N02.S3.E1 s4_a = 1 [default = E1_A];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::N01::N02::S3_E1_IsValid(value)) {
            set_s4_a(static_cast< ::N01::N02::S3_E1 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s4_b;
        break;
      }

      // required string s4_b = 2;
      case 2: {
        if (tag == 18) {
         parse_s4_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s4_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s4_b().data(), this->s4_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s4_b");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N01.N02.S3.S4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N01.N02.S3.S4)
  return false;
#undef DO_
}

void S3_S4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N01.N02.S3.S4)
  // optional .N01.N02.S3.E1 s4_a = 1 [default = E1_A];
  if (has_s4_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->s4_a(), output);
  }

  // required string s4_b = 2;
  if (has_s4_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s4_b().data(), this->s4_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s4_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s4_b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N01.N02.S3.S4)
}

::google::protobuf::uint8* S3_S4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N01.N02.S3.S4)
  // optional .N01.N02.S3.E1 s4_a = 1 [default = E1_A];
  if (has_s4_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->s4_a(), target);
  }

  // required string s4_b = 2;
  if (has_s4_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s4_b().data(), this->s4_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s4_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s4_b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N01.N02.S3.S4)
  return target;
}

int S3_S4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .N01.N02.S3.E1 s4_a = 1 [default = E1_A];
    if (has_s4_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->s4_a());
    }

    // required string s4_b = 2;
    if (has_s4_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s4_b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S3_S4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S3_S4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S3_S4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S3_S4::MergeFrom(const S3_S4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s4_a()) {
      set_s4_a(from.s4_a());
    }
    if (from.has_s4_b()) {
      set_s4_b(from.s4_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S3_S4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S3_S4::CopyFrom(const S3_S4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3_S4::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void S3_S4::Swap(S3_S4* other) {
  if (other != this) {
    std::swap(s4_a_, other->s4_a_);
    std::swap(s4_b_, other->s4_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S3_S4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S3_S4_descriptor_;
  metadata.reflection = S3_S4_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int S3::kS3AFieldNumber;
const int S3::kS3BFieldNumber;
const int S3::kS3CFieldNumber;
const int S3::kS3DFieldNumber;
const int S3::kS3EFieldNumber;
const int S3::kS3FFieldNumber;
#endif  // !_MSC_VER

S3::S3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:N01.N02.S3)
}

void S3::InitAsDefaultInstance() {
  s3_e_ = const_cast< ::N01::N02::S3*>(&::N01::N02::S3::default_instance());
}

S3::S3(const S3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:N01.N02.S3)
}

void S3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  s3_a_ = 0;
  s3_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s3_c_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s3_e_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S3::~S3() {
  // @@protoc_insertion_point(destructor:N01.N02.S3)
  SharedDtor();
}

void S3::SharedDtor() {
  if (s3_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_b_;
  }
  if (s3_c_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s3_c_;
  }
  if (this != default_instance_) {
    delete s3_e_;
  }
}

void S3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S3_descriptor_;
}

const S3& S3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5f02_2eproto();
  return *default_instance_;
}

S3* S3::default_instance_ = NULL;

S3* S3::New() const {
  return new S3;
}

void S3::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    s3_a_ = 0;
    if (has_s3_b()) {
      if (s3_b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s3_b_->clear();
      }
    }
    if (has_s3_c()) {
      if (s3_c_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s3_c_->clear();
      }
    }
    if (has_s3_e()) {
      if (s3_e_ != NULL) s3_e_->::N01::N02::S3::Clear();
    }
  }
  s3_d_.Clear();
  s3_f_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:N01.N02.S3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 s3_a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s3_a_)));
          set_has_s3_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_s3_b;
        break;
      }

      // required string s3_b = 2;
      case 2: {
        if (tag == 18) {
         parse_s3_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s3_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s3_b().data(), this->s3_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s3_b");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_s3_c;
        break;
      }

      // optional string s3_c = 3;
      case 3: {
        if (tag == 26) {
         parse_s3_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s3_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s3_c().data(), this->s3_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s3_c");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s3_d;
        break;
      }

      // repeated .N01.N02.S1 s3_d = 4;
      case 4: {
        if (tag == 34) {
         parse_s3_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_s3_d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s3_d;
        if (input->ExpectTag(42)) goto parse_s3_e;
        break;
      }

      // required .N01.N02.S3 s3_e = 5;
      case 5: {
        if (tag == 42) {
         parse_s3_e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s3_e()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_s3_f;
        break;
      }

      // repeated .N01.N02.S3.S4 s3_f = 6;
      case 6: {
        if (tag == 50) {
         parse_s3_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_s3_f()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_s3_f;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:N01.N02.S3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:N01.N02.S3)
  return false;
#undef DO_
}

void S3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:N01.N02.S3)
  // required int32 s3_a = 1;
  if (has_s3_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s3_a(), output);
  }

  // required string s3_b = 2;
  if (has_s3_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_b().data(), this->s3_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s3_b(), output);
  }

  // optional string s3_c = 3;
  if (has_s3_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_c().data(), this->s3_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->s3_c(), output);
  }

  // repeated .N01.N02.S1 s3_d = 4;
  for (int i = 0; i < this->s3_d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->s3_d(i), output);
  }

  // required .N01.N02.S3 s3_e = 5;
  if (has_s3_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->s3_e(), output);
  }

  // repeated .N01.N02.S3.S4 s3_f = 6;
  for (int i = 0; i < this->s3_f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->s3_f(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:N01.N02.S3)
}

::google::protobuf::uint8* S3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:N01.N02.S3)
  // required int32 s3_a = 1;
  if (has_s3_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s3_a(), target);
  }

  // required string s3_b = 2;
  if (has_s3_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_b().data(), this->s3_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s3_b(), target);
  }

  // optional string s3_c = 3;
  if (has_s3_c()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s3_c().data(), this->s3_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s3_c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->s3_c(), target);
  }

  // repeated .N01.N02.S1 s3_d = 4;
  for (int i = 0; i < this->s3_d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->s3_d(i), target);
  }

  // required .N01.N02.S3 s3_e = 5;
  if (has_s3_e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->s3_e(), target);
  }

  // repeated .N01.N02.S3.S4 s3_f = 6;
  for (int i = 0; i < this->s3_f_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->s3_f(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:N01.N02.S3)
  return target;
}

int S3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 s3_a = 1;
    if (has_s3_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s3_a());
    }

    // required string s3_b = 2;
    if (has_s3_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s3_b());
    }

    // optional string s3_c = 3;
    if (has_s3_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s3_c());
    }

    // required .N01.N02.S3 s3_e = 5;
    if (has_s3_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s3_e());
    }

  }
  // repeated .N01.N02.S1 s3_d = 4;
  total_size += 1 * this->s3_d_size();
  for (int i = 0; i < this->s3_d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->s3_d(i));
  }

  // repeated .N01.N02.S3.S4 s3_f = 6;
  total_size += 1 * this->s3_f_size();
  for (int i = 0; i < this->s3_f_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->s3_f(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S3::MergeFrom(const S3& from) {
  GOOGLE_CHECK_NE(&from, this);
  s3_d_.MergeFrom(from.s3_d_);
  s3_f_.MergeFrom(from.s3_f_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s3_a()) {
      set_s3_a(from.s3_a());
    }
    if (from.has_s3_b()) {
      set_s3_b(from.s3_b());
    }
    if (from.has_s3_c()) {
      set_s3_c(from.s3_c());
    }
    if (from.has_s3_e()) {
      mutable_s3_e()->::N01::N02::S3::MergeFrom(from.s3_e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S3::CopyFrom(const S3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_s3_e()) {
    if (!this->s3_e().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->s3_f())) return false;
  return true;
}

void S3::Swap(S3* other) {
  if (other != this) {
    std::swap(s3_a_, other->s3_a_);
    std::swap(s3_b_, other->s3_b_);
    std::swap(s3_c_, other->s3_c_);
    s3_d_.Swap(&other->s3_d_);
    std::swap(s3_e_, other->s3_e_);
    s3_f_.Swap(&other->s3_f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S3_descriptor_;
  metadata.reflection = S3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace N02
}  // namespace N01

// @@protoc_insertion_point(global_scope)
